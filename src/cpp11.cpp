// Generated by cpp11: do not edit by hand
// clang-format off

#include "CytoML_types.h"
#include "cpp11/declarations.hpp"

// parseFlowJoWorkspace.cpp
void setLogLevel(int short loglevel);
extern "C" SEXP _CytoML_setLogLevel(SEXP loglevel) {
  BEGIN_CPP11
    setLogLevel(cpp11::as_cpp<cpp11::decay_t<int short>>(loglevel));
    return R_NilValue;
  END_CPP11
}
// parseFlowJoWorkspace.cpp
cpp11::external_pointer<flowJoWorkspace> open_workspace(std::string filename, int sample_name_location, int xmlParserOption);
extern "C" SEXP _CytoML_open_workspace(SEXP filename, SEXP sample_name_location, SEXP xmlParserOption) {
  BEGIN_CPP11
    return cpp11::as_sexp(open_workspace(cpp11::as_cpp<cpp11::decay_t<std::string>>(filename), cpp11::as_cpp<cpp11::decay_t<int>>(sample_name_location), cpp11::as_cpp<cpp11::decay_t<int>>(xmlParserOption)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
cpp11::external_pointer<GatingSet> parse_workspace(cpp11::external_pointer<flowJoWorkspace> ws, int group_id, cpp11::list subset, bool execute, std::string path, cpp11::external_pointer<GatingSet> cytoset, std::string backend_dir, std::string backend, bool includeGates, vector<std::string> additional_keys, bool additional_sampleID, vector<std::string> keywords, bool is_pheno_data_from_FCS, bool keyword_ignore_case, float extend_val, float extend_to, bool channel_ignore_case, bool leaf_bool, bool include_empty_tree, bool skip_faulty_gate, cpp11::list comps, bool transform, std::string fcs_file_extension, bool greedy_match, SEXP fcs_parse_arg, int num_threads);
extern "C" SEXP _CytoML_parse_workspace(SEXP ws, SEXP group_id, SEXP subset, SEXP execute, SEXP path, SEXP cytoset, SEXP backend_dir, SEXP backend, SEXP includeGates, SEXP additional_keys, SEXP additional_sampleID, SEXP keywords, SEXP is_pheno_data_from_FCS, SEXP keyword_ignore_case, SEXP extend_val, SEXP extend_to, SEXP channel_ignore_case, SEXP leaf_bool, SEXP include_empty_tree, SEXP skip_faulty_gate, SEXP comps, SEXP transform, SEXP fcs_file_extension, SEXP greedy_match, SEXP fcs_parse_arg, SEXP num_threads) {
  BEGIN_CPP11
    return cpp11::as_sexp(parse_workspace(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws), cpp11::as_cpp<cpp11::decay_t<int>>(group_id), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(subset), cpp11::as_cpp<cpp11::decay_t<bool>>(execute), cpp11::as_cpp<cpp11::decay_t<std::string>>(path), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cytoset), cpp11::as_cpp<cpp11::decay_t<std::string>>(backend_dir), cpp11::as_cpp<cpp11::decay_t<std::string>>(backend), cpp11::as_cpp<cpp11::decay_t<bool>>(includeGates), cpp11::as_cpp<cpp11::decay_t<vector<std::string>>>(additional_keys), cpp11::as_cpp<cpp11::decay_t<bool>>(additional_sampleID), cpp11::as_cpp<cpp11::decay_t<vector<std::string>>>(keywords), cpp11::as_cpp<cpp11::decay_t<bool>>(is_pheno_data_from_FCS), cpp11::as_cpp<cpp11::decay_t<bool>>(keyword_ignore_case), cpp11::as_cpp<cpp11::decay_t<float>>(extend_val), cpp11::as_cpp<cpp11::decay_t<float>>(extend_to), cpp11::as_cpp<cpp11::decay_t<bool>>(channel_ignore_case), cpp11::as_cpp<cpp11::decay_t<bool>>(leaf_bool), cpp11::as_cpp<cpp11::decay_t<bool>>(include_empty_tree), cpp11::as_cpp<cpp11::decay_t<bool>>(skip_faulty_gate), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(comps), cpp11::as_cpp<cpp11::decay_t<bool>>(transform), cpp11::as_cpp<cpp11::decay_t<std::string>>(fcs_file_extension), cpp11::as_cpp<cpp11::decay_t<bool>>(greedy_match), cpp11::as_cpp<cpp11::decay_t<SEXP>>(fcs_parse_arg), cpp11::as_cpp<cpp11::decay_t<int>>(num_threads)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
SEXP get_keywords_by_id(cpp11::external_pointer<flowJoWorkspace> ws, int sample_id);
extern "C" SEXP _CytoML_get_keywords_by_id(SEXP ws, SEXP sample_id) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_keywords_by_id(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws), cpp11::as_cpp<cpp11::decay_t<int>>(sample_id)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
SEXP get_keywords_by_name(cpp11::external_pointer<flowJoWorkspace> ws, std::string sample_name);
extern "C" SEXP _CytoML_get_keywords_by_name(SEXP ws, SEXP sample_name) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_keywords_by_name(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws), cpp11::as_cpp<cpp11::decay_t<std::string>>(sample_name)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
cpp11::list get_sample_groups(cpp11::external_pointer<flowJoWorkspace> ws);
extern "C" SEXP _CytoML_get_sample_groups(SEXP ws) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_sample_groups(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
cpp11::list get_samples(cpp11::external_pointer<flowJoWorkspace> ws);
extern "C" SEXP _CytoML_get_samples(SEXP ws) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_samples(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws)));
  END_CPP11
}
// parseFlowJoWorkspace.cpp
std::string get_xml_file_path(cpp11::external_pointer<flowJoWorkspace> ws);
extern "C" SEXP _CytoML_get_xml_file_path(SEXP ws) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_xml_file_path(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<flowJoWorkspace>>>(ws)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _CytoML_get_keywords_by_id(SEXP, SEXP);
extern SEXP _CytoML_get_keywords_by_name(SEXP, SEXP);
extern SEXP _CytoML_get_sample_groups(SEXP);
extern SEXP _CytoML_get_samples(SEXP);
extern SEXP _CytoML_get_xml_file_path(SEXP);
extern SEXP _CytoML_open_workspace(SEXP, SEXP, SEXP);
extern SEXP _CytoML_parse_workspace(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _CytoML_setLogLevel(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_CytoML_get_keywords_by_id",   (DL_FUNC) &_CytoML_get_keywords_by_id,    2},
    {"_CytoML_get_keywords_by_name", (DL_FUNC) &_CytoML_get_keywords_by_name,  2},
    {"_CytoML_get_sample_groups",    (DL_FUNC) &_CytoML_get_sample_groups,     1},
    {"_CytoML_get_samples",          (DL_FUNC) &_CytoML_get_samples,           1},
    {"_CytoML_get_xml_file_path",    (DL_FUNC) &_CytoML_get_xml_file_path,     1},
    {"_CytoML_open_workspace",       (DL_FUNC) &_CytoML_open_workspace,        3},
    {"_CytoML_parse_workspace",      (DL_FUNC) &_CytoML_parse_workspace,      26},
    {"_CytoML_setLogLevel",          (DL_FUNC) &_CytoML_setLogLevel,           1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_CytoML(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
